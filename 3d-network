<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Abstract Network Design</title>
    <!-- Use Tailwind CSS for rapid styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            overflow: hidden; /* Hide scrollbars for the 3D scene */
            color: #e0e0e0;
            background-color: #0d0d10; /* A dark, deep background */
        }
        canvas {
            display: block;
            width: 100vw;
            height: 100vh;
        }
        .info-box {
            position: absolute;
            top: 1rem;
            left: 1rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 0.75rem;
            max-width: 300px;
            z-index: 100;
        }
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #0d0d10;
            z-index: 1000;
            transition: opacity 1s ease-in-out;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100">

    <!-- Loading overlay -->
    <div id="loading-overlay" class="loading-overlay">
        <div class="loader"></div>
    </div>

    <!-- Info box -->
    <div class="info-box shadow-lg">
        <h1 class="text-xl font-bold mb-2">Interactive Network</h1>
        <p class="text-sm text-gray-400">Drag to rotate. Inspired by your uploaded designs.</p>
    </div>

    <!-- Canvas for the 3D scene -->
    <canvas id="three-canvas"></canvas>

    <!-- Three.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- OrbitControls for camera interaction -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

    <script>
        window.onload = function() {
            // Scene setup
            let scene, camera, renderer, controls;
            let spheres = [];
            let connections = [];
            const sphereCount = 250;
            const connectionDistance = 50;

            // Function to initialize the scene
            function init() {
                // Remove loading overlay
                const loadingOverlay = document.getElementById('loading-overlay');
                loadingOverlay.style.opacity = '0';
                setTimeout(() => loadingOverlay.style.display = 'none', 1000);

                // Set up the scene
                scene = new THREE.Scene();
                scene.background = new THREE.Color(0x0d0d10);
                scene.fog = new THREE.Fog(0x0d0d10, 1, 1000);

                // Set up the camera
                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                camera.position.z = 200;

                // Set up the renderer
                renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('three-canvas'), antialias: true });
                renderer.setSize(window.innerWidth, window.innerHeight);

                // Set up the OrbitControls for camera movement
                controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.enableDamping = true; // gives a more fluid feeling to the controls
                controls.dampingFactor = 0.05;

                // Create lights
                const ambientLight = new THREE.AmbientLight(0x404040, 2); // soft white light
                scene.add(ambientLight);

                const pointLight = new THREE.PointLight(0xffffff, 1, 1000);
                pointLight.position.set(50, 50, 50);
                scene.add(pointLight);

                // Create sphere geometry and material
                const sphereGeometry = new THREE.SphereGeometry(1, 16, 16);
                const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xcccccc });

                // Create and place spheres
                for (let i = 0; i < sphereCount; i++) {
                    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
                    sphere.position.x = (Math.random() - 0.5) * 400;
                    sphere.position.y = (Math.random() - 0.5) * 400;
                    sphere.position.z = (Math.random() - 0.5) * 400;
                    sphere.userData.originalScale = 1;
                    scene.add(sphere);
                    spheres.push(sphere);
                }

                // Create connections (lines) between nearby spheres
                const lineMaterial = new THREE.LineBasicMaterial({
                    color: 0x3a86ff, // a vibrant blue
                    transparent: true,
                    opacity: 0.1
                });
                
                for (let i = 0; i < sphereCount; i++) {
                    for (let j = i + 1; j < sphereCount; j++) {
                        const sphere1 = spheres[i];
                        const sphere2 = spheres[j];
                        const distance = sphere1.position.distanceTo(sphere2.position);

                        if (distance < connectionDistance) {
                            const points = [sphere1.position, sphere2.position];
                            const geometry = new THREE.BufferGeometry().setFromPoints(points);
                            const line = new THREE.Line(geometry, lineMaterial);
                            scene.add(line);
                            connections.push(line);
                        }
                    }
                }

                // Handle window resizing
                window.addEventListener('resize', onWindowResize, false);
            }

            // Function to handle window resizing
            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }

            // Animation loop
            function animate() {
                requestAnimationFrame(animate);

                // Update controls
                controls.update();

                // Update spheres
                const time = Date.now() * 0.001;
                for (let i = 0; i < spheres.length; i++) {
                    const sphere = spheres[i];
                    // Make spheres pulsate slightly
                    const scale = 1 + Math.sin(time + sphere.position.x * 0.01 + sphere.position.y * 0.01 + sphere.position.z * 0.01) * 0.2;
                    sphere.scale.set(scale, scale, scale);
                }

                // Render the scene
                renderer.render(scene, camera);
            }

            // Start the application
            init();
            animate();
        };
    </script>
</body>
</html>

